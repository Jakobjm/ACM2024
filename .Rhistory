else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli <- as.data.frame(lapply(stimuli_shuff$stimuli, as.numeric))
danger <- stimuli_shuff$danger
predict_dangerous(stimuli, true_c = 2, true_w = c(1,1,1,1,1), danger)
View(stimuli)
View(stimuli_shuff)
View(stimuli)
View(stimuli_shuff)
View(stimuli_shuff)
stimuli_shuff$stimuli[,2:6]
stimuli_shuff[,2:6]
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger, quiet = TRUE) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (!quiet && i %% 10 == 0) {
print(paste("i=", i))
}
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli <- stimuli_shuff[,2:6]
danger <- stimuli_shuff$danger
predict_dangerous(stimuli, true_c = 2, true_w = c(1,1,1,1,1), danger)
stimuli <- stimuli_shuff[,2:6]
danger <- stimuli_shuff$danger
dangerous <- predict_dangerous(stimuli, true_c = 2, true_w = c(1,1,1,1,1), danger)
stimuli <- stimuli_shuff[,2:6]
danger <- stimuli_shuff$danger
dangerous <- predict_dangerous(stimuli, true_c = 2, true_w = c(1,1,1,1,1), danger)
# append dangerous to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(dangerous = dangerous)
# shuffle the stimuli
stimuli_shuff1 <- stimuli[sample(nrow(stimuli)), ]
stimuli_shuff2 <- stimuli_shuff1[sample(nrow(stimuli_shuff1)), ]
stimuli_shuff3 <- stimuli_shuff2[sample(nrow(stimuli_shuff2)), ]
# stack the stimuli without them mixing
stimuli_shuff <- stimuli_shuff1 %>%
bind_rows(stimuli_shuff2) %>%
bind_rows(stimuli_shuff3)
# adding ID for agent just number 1 all rows
stimuli_shuff <- stimuli_shuff %>%
mutate(ID = 1)
# add trials to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(trials = row_number())
pacman::p_load(tidyverse)
# open file
read_csv("AlienData.txt")
stimuli <- expand.grid(
Feature1 = c(0,1),
Feature2 = c(0,1),
Feature3 = c(0,1),
Feature4 = c(0,1),
Feature5 = c(0,1)
)
# add a column named stimuli that combines the numbers for each row and keeps the originlals
stimuli <- stimuli %>%
mutate(stimuli = paste0(Feature1, Feature2, Feature3, Feature4, Feature5)) %>%
select(stimuli, everything())
# setting rules for the game, In the first session: danger depends on the alien having spots AND eyes on stalks (feature 1 AND feature 3 both being 1); nutrition depends on arms being up (feature 4 being 1).
stimuli <- stimuli %>%
mutate(
danger = ifelse(Feature1 == 1 & Feature3 == 1, 1, 0)
)
View(stimuli_shuff)
pacman::p_load(tidyverse)
# open file
read_csv("AlienData.txt")
stimuli <- expand.grid(
Feature1 = c(0,1),
Feature2 = c(0,1),
Feature3 = c(0,1),
Feature4 = c(0,1),
Feature5 = c(0,1)
)
# add a column named stimuli that combines the numbers for each row and keeps the originlals
stimuli <- stimuli %>%
mutate(stimuli = paste0(Feature1, Feature2, Feature3, Feature4, Feature5)) %>%
select(stimuli, everything())
# setting rules for the game, In the first session: danger depends on the alien having spots AND eyes on stalks (feature 1 AND feature 3 both being 1); nutrition depends on arms being up (feature 4 being 1).
stimuli <- stimuli %>%
mutate(
danger = ifelse(Feature1 == 1 & Feature3 == 1, 1, 0)
)
# shuffle the stimuli
stimuli_shuff1 <- stimuli[sample(nrow(stimuli)), ]
stimuli_shuff2 <- stimuli_shuff1[sample(nrow(stimuli_shuff1)), ]
stimuli_shuff3 <- stimuli_shuff2[sample(nrow(stimuli_shuff2)), ]
# stack the stimuli without them mixing
stimuli_shuff <- stimuli_shuff1 %>%
bind_rows(stimuli_shuff2) %>%
bind_rows(stimuli_shuff3)
# adding ID for agent just number 1 all rows
stimuli_shuff <- stimuli_shuff %>%
mutate(ID = 1)
# add trials to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(trials = row_number())
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger, quiet = TRUE) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (!quiet && i %% 10 == 0) {
print(paste("i=", i))
}
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli <- stimuli_shuff[,2:6]
danger <- stimuli_shuff$danger
predict_dangerous(stimuli, true_c = 2, true_w = c(1,1,1,1,1), danger)
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
pacman::p_load(tidyverse)
# open file
read_csv("AlienData.txt")
stimuli <- expand.grid(
Feature1 = c(0,1),
Feature2 = c(0,1),
Feature3 = c(0,1),
Feature4 = c(0,1),
Feature5 = c(0,1)
)
# add a column named stimuli that combines the numbers for each row and keeps the originlals
stimuli <- stimuli %>%
mutate(stimuli = paste0(Feature1, Feature2, Feature3, Feature4, Feature5)) %>%
select(stimuli, everything())
# setting rules for the game, In the first session: danger depends on the alien having spots AND eyes on stalks (feature 1 AND feature 3 both being 1); nutrition depends on arms being up (feature 4 being 1).
stimuli <- stimuli %>%
mutate(
danger = ifelse(Feature1 == 1 & Feature3 == 1, 1, 0)
)
# shuffle the stimuli
stimuli_shuff1 <- stimuli[sample(nrow(stimuli)), ]
stimuli_shuff2 <- stimuli_shuff1[sample(nrow(stimuli_shuff1)), ]
stimuli_shuff3 <- stimuli_shuff2[sample(nrow(stimuli_shuff2)), ]
# stack the stimuli without them mixing
stimuli_shuff <- stimuli_shuff1 %>%
bind_rows(stimuli_shuff2) %>%
bind_rows(stimuli_shuff3)
# adding ID for agent just number 1 all rows
stimuli_shuff <- stimuli_shuff %>%
mutate(ID = 1)
# add trials to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(trials = row_number())
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger, quiet = TRUE) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (!quiet && i %% 10 == 0) {
print(paste("i=", i))
}
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
View(stimuli_shuff)
View(stimuli_shuff)
View(stimuli_shuff)
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger, quiet = TRUE) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (!quiet && i %% 10 == 0) {
print(paste("i=", i))
}
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger, quiet = TRUE) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (!quiet && i %% 10 == 0) {
print(paste("i=", i))
}
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
set.seed(1000)
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger, quiet = TRUE) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (!quiet && i %% 10 == 0) {
print(paste("i=", i))
}
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
pacman::p_load(tidyverse)
# open file
read_csv("AlienData.txt")
stimuli <- expand.grid(
Feature1 = c(0,1),
Feature2 = c(0,1),
Feature3 = c(0,1),
Feature4 = c(0,1),
Feature5 = c(0,1)
)
# add a column named stimuli that combines the numbers for each row and keeps the originlals
stimuli <- stimuli %>%
mutate(stimuli = paste0(Feature1, Feature2, Feature3, Feature4, Feature5)) %>%
select(stimuli, everything())
# setting rules for the game, In the first session: danger depends on the alien having spots AND eyes on stalks (feature 1 AND feature 3 both being 1); nutrition depends on arms being up (feature 4 being 1).
stimuli <- stimuli %>%
mutate(
danger = ifelse(Feature1 == 1 & Feature3 == 1, 1, 0)
)
# shuffle the stimuli
stimuli_shuff1 <- stimuli[sample(nrow(stimuli)), ]
stimuli_shuff2 <- stimuli_shuff1[sample(nrow(stimuli_shuff1)), ]
stimuli_shuff3 <- stimuli_shuff2[sample(nrow(stimuli_shuff2)), ]
# stack the stimuli without them mixing
stimuli_shuff <- stimuli_shuff1 %>%
bind_rows(stimuli_shuff2) %>%
bind_rows(stimuli_shuff3)
# adding ID for agent just number 1 all rows
stimuli_shuff <- stimuli_shuff %>%
mutate(ID = 1)
# add trials to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(trials = row_number())
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r))
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
getwd()
pacman::p_load(tidyverse)
# open file
read_csv("AlienData.txt")
stimuli <- expand.grid(
Feature1 = c(0,1),
Feature2 = c(0,1),
Feature3 = c(0,1),
Feature4 = c(0,1),
Feature5 = c(0,1)
)
# add a column named stimuli that combines the numbers for each row and keeps the originlals
stimuli <- stimuli %>%
mutate(stimuli = paste0(Feature1, Feature2, Feature3, Feature4, Feature5)) %>%
select(stimuli, everything())
# setting rules for the game, In the first session: danger depends on the alien having spots AND eyes on stalks (feature 1 AND feature 3 both being 1); nutrition depends on arms being up (feature 4 being 1).
stimuli <- stimuli %>%
mutate(
danger = ifelse(Feature1 == 1 & Feature3 == 1, 1, 0)
)
# shuffle the stimuli
stimuli_shuff1 <- stimuli[sample(nrow(stimuli)), ]
stimuli_shuff2 <- stimuli_shuff1[sample(nrow(stimuli_shuff1)), ]
stimuli_shuff3 <- stimuli_shuff2[sample(nrow(stimuli_shuff2)), ]
# stack the stimuli without them mixing
stimuli_shuff <- stimuli_shuff1 %>%
bind_rows(stimuli_shuff2) %>%
bind_rows(stimuli_shuff3)
# adding ID for agent just number 1 all rows
stimuli_shuff <- stimuli_shuff %>%
mutate(ID = 1)
# add trials to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(trials = row_number())
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r)) # probabilistic response - not deterministic
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(1, 1, 1, 1, 1),
danger = stimuli_shuff$danger
)
# save simulated data as csv
write_csv(stimuli_shuff, "simulated_data.csv")
