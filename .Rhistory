legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
samples_empirical <- mod$sample(
data = gcm_data_empirical,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 500
)
# Save model fits
samples_empirical$save_object("empirical_fit.rds")
# fit simulated data
samples_simulated <- mod$sample(
data = gcm_data_simulated,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 500
)
# Save model fits
samples_simulated$save_object("simulated_fit.rds")
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
file <- file.path("src/stan/GCM_model.stan")
# Load simulated data
sim_dat <- read.csv("data/simulated_data.csv")
# load empirical data
real_d <- read.csv("data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
samples_empirical <- mod$sample(
data = gcm_data_empirical,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 3000,
refresh = 500
)
# Save model fits
samples_empirical$save_object("empirical_fit.rds")
# fit simulated data
samples_simulated <- mod$sample(
data = gcm_data_simulated,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 3000,
refresh = 500
)
# Save model fits
samples_simulated$save_object("simulated_fit.rds")
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws <- samples_simulated$draws()
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws <- samples_simulated$draws()
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df$`w[1]`),
w2 = mean(draws_df$`w[2]`),
w3 = mean(draws_df$`w[3]`),
w4 = mean(draws_df$`w[4]`),
w5 = mean(draws_df$`w[5]`),
c  = mean(draws_df$`c`)
)
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df$w[1]),
w2 = mean(draws_df$w[2]),
w3 = mean(draws_df$w[3]),
w4 = mean(draws_df$w[4]),
w5 = mean(draws_df$w[5]),
c  = mean(draws_df$c)
)
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df$w[1]),
w2 = mean(draws_df$w[2]),
w3 = mean(draws_df$w[3]),
w4 = mean(draws_df$w[4]),
w5 = mean(draws_df$w[5]),
c  = mean(draws_df$c)
)
# Combine into a data frame for plotting
param_df <- data.frame(
Parameter = names(true_params),
True = true_params,
Estimated = estimated_params
)
# Plot
ggplot(param_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
geom_text(vjust = -0.5, hjust = 0.5) +
xlim(0, 1) + ylim(0, 1) +
coord_fixed() +
theme_minimal() +
labs(
title = "Estimated vs. True Parameters",
x = "True Parameter Value",
y = "Estimated Posterior Mean"
)
View(param_df)
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df[["w[1]"]]),
w2 = mean(draws_df[["w[2]"]]),
w3 = mean(draws_df[["w[3]"]]),
w4 = mean(draws_df[["w[4]"]]),
w5 = mean(draws_df[["w[5]"]]),
c  = mean(draws_df[["c"]])
)
# Combine into a data frame for plotting
param_df <- data.frame(
Parameter = names(true_params),
True = true_params,
Estimated = estimated_params
)
# Plot
ggplot(param_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
geom_text(vjust = -0.5, hjust = 0.5) +
xlim(0, 1) + ylim(0, 1) +
coord_fixed() +
theme_minimal() +
labs(
title = "Estimated vs. True Parameters",
x = "True Parameter Value",
y = "Estimated Posterior Mean"
)
View(draws_df)
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df[["1.w[1]"]]),
w2 = mean(draws_df[["w[2]"]]),
w3 = mean(draws_df[["w[3]"]]),
w4 = mean(draws_df[["w[4]"]]),
w5 = mean(draws_df[["w[5]"]]),
c  = mean(draws_df[["c"]])
)
# Combine into a data frame for plotting
param_df <- data.frame(
Parameter = names(true_params),
True = true_params,
Estimated = estimated_params
)
# Plot
ggplot(param_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
geom_text(vjust = -0.5, hjust = 0.5) +
xlim(0, 1) + ylim(0, 1) +
coord_fixed() +
theme_minimal() +
labs(
title = "Estimated vs. True Parameters",
x = "True Parameter Value",
y = "Estimated Posterior Mean"
)
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df[["1.w[1]"]]),
w2 = mean(draws_df[["1.w[2]"]]),
w3 = mean(draws_df[["1.w[3]"]]),
w4 = mean(draws_df[["1.w[4]"]]),
w5 = mean(draws_df[["1.w[5]"]]),
c  = mean(draws_df[["1.c"]])
)
# Combine into a data frame for plotting
param_df <- data.frame(
Parameter = names(true_params),
True = true_params,
Estimated = estimated_params
)
# Plot
ggplot(param_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
geom_text(vjust = -0.5, hjust = 0.5) +
xlim(0, 1) + ylim(0, 1) +
coord_fixed() +
theme_minimal() +
labs(
title = "Estimated vs. True Parameters",
x = "True Parameter Value",
y = "Estimated Posterior Mean"
)
View(param_df)
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values (replace with your actual values)
true_params <- c(w1 = 0.2, w2 = 0.2, w3 = 0.3, w4 = 0.1, w5 = 0.2, c = 2)
# Extract posterior means
estimated_params <- c(
w1 = mean(draws_df[["1.w[1]"]]),
w2 = mean(draws_df[["1.w[2]"]]),
w3 = mean(draws_df[["1.w[3]"]]),
w4 = mean(draws_df[["1.w[4]"]]),
w5 = mean(draws_df[["1.w[5]"]]),
c  = mean(draws_df[["1.c"]])
)
# Combine into a data frame for plotting
param_df <- data.frame(
Parameter = names(true_params),
True = true_params,
Estimated = estimated_params
)
# Plot
ggplot(param_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
geom_text(vjust = -0.5, hjust = 0.5) +
xlim(0, 3) + ylim(0, 3) +
coord_fixed() +
theme_minimal() +
labs(
title = "Estimated vs. True Parameters",
x = "True Parameter Value",
y = "Estimated Posterior Mean"
)
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values
true_weights <- c(w1 = 0.3, w2 = 0.2, w3 = 0.1, w4 = 0.25, w5 = 0.15)
true_c <- c_value <- 0.5
# Extract posterior means
estimated_weights <- c(
w1 = mean(draws_df[["1.w[1]"]]),
w2 = mean(draws_df[["1.w[2]"]]),
w3 = mean(draws_df[["1.w[3]"]]),
w4 = mean(draws_df[["1.w[4]"]]),
w5 = mean(draws_df[["1.w[5]"]]),
)
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values
true_weights <- c(w1 = 0.3, w2 = 0.2, w3 = 0.1, w4 = 0.25, w5 = 0.15)
true_c <- c_value <- 0.5
# Extract posterior means
estimated_weights <- c(
w1 = mean(draws_df[["1.w[1]"]]),
w2 = mean(draws_df[["1.w[2]"]]),
w3 = mean(draws_df[["1.w[3]"]]),
w4 = mean(draws_df[["1.w[4]"]]),
w5 = mean(draws_df[["1.w[5]"]])
)
estimated_c <- mean(draws_df[["1.c"]])
# Combine into a data frame for plotting
weights_df <- data.frame(
Parameter = names(true_weights),
True = true_weights,
Estimated = estimated_weights
)
c_df <- data.frame(
Parameter = "c",
True = true_c,
Estimated = estimated_c
)
# weight parameters
ggplot(weights_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "darkorange") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_text(vjust = -0.5) +
coord_fixed() +
xlim(0, 1) + ylim(0, 1) +
theme_minimal() +
labs(title = "Estimated vs. True Weights", x = "True Weight", y = "Estimated Weight")
# scaling parameter
ggplot(c_df, aes(x = True, y = Estimated)) +
geom_point(size = 4, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_text(aes(label = Parameter), vjust = -1) +
xlim(0, 3) + ylim(0, 3) +
coord_fixed() +
theme_minimal() +
labs(title = "Estimated vs. True c Parameter", x = "True c", y = "Estimated c")
# scaling parameter
ggplot(c_df, aes(x = True, y = Estimated)) +
geom_point(size = 4, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_text(aes(label = Parameter), vjust = -1) +
xlim(0, 5) + ylim(0, 5) +
coord_fixed() +
theme_minimal() +
labs(title = "Estimated vs. True c Parameter", x = "True c", y = "Estimated c")
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# load packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# import simulated model
samples_simulated <- readRDS("src/stan/simulated_fit.rds")
samples_simulated$summary()
draws_df <- as.data.frame(samples_simulated$draws())
# True parameter values
true_weights <- c(w1 = 0.3, w2 = 0.2, w3 = 0.1, w4 = 0.25, w5 = 0.15)
true_c <- c_value <- 2
# Extract posterior means
estimated_weights <- c(
w1 = mean(draws_df[["1.w[1]"]]),
w2 = mean(draws_df[["1.w[2]"]]),
w3 = mean(draws_df[["1.w[3]"]]),
w4 = mean(draws_df[["1.w[4]"]]),
w5 = mean(draws_df[["1.w[5]"]])
)
estimated_c <- mean(draws_df[["1.c"]])
# Combine into a data frame for plotting
weights_df <- data.frame(
Parameter = names(true_weights),
True = true_weights,
Estimated = estimated_weights
)
c_df <- data.frame(
Parameter = "c",
True = true_c,
Estimated = estimated_c
)
# weight parameters
ggplot(weights_df, aes(x = True, y = Estimated, label = Parameter)) +
geom_point(size = 3, color = "darkorange") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_text(vjust = -0.5) +
coord_fixed() +
xlim(0, 1) + ylim(0, 1) +
theme_minimal() +
labs(title = "Estimated vs. True Weights", x = "True Weight", y = "Estimated Weight")
# scaling parameter
ggplot(c_df, aes(x = True, y = Estimated)) +
geom_point(size = 4, color = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_text(aes(label = Parameter), vjust = -1) +
xlim(0, 5) + ylim(0, 5) +
coord_fixed() +
theme_minimal() +
labs(title = "Estimated vs. True c Parameter", x = "True c", y = "Estimated c")
