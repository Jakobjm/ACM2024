denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r)) # probabilistic response - not deterministic
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(0.5, 0.5, 2, 0.5, 1),
danger = stimuli_shuff$danger
)
# save simulated data as csv
write_csv(stimuli_shuff, "simulated_data.csv")
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
file <- file.path("Assignment_4/src/stan/GCM_model.stan")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
sim_dat <- read.csv("Assignment_4/data/simulated_data.csv")
# load empirical data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
real_d <- read.csv("Assignment_4/data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
View(sim_dat)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
file <- file.path("Assignment_4/src/stan/GCM_model.stan")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
sim_dat <- read.csv("Assignment_4/data/simulated_data.csv")
# load empirical data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
real_d <- read.csv("Assignment_4/data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
getwd()
# Specify where the model is
file <- file.path("Assignment_4/src/stan/GCM_model.stan")
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
file <- file.path("Assignment_4/src/stan/GCM_model.stan")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
sim_dat <- read.csv("Assignment_4/data/simulated_data.csv")
# load empirical data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
real_d <- read.csv("Assignment_4/data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
# Specify where the model is
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
file <- file.path("/Assignment_4/src/stan/GCM_model.stan")
# Specify where the model is
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
file <- file.path("Assignment_4/src/stan/GCM_model.stan")
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
file <- file.path("Assignment_4/src/stan/GCM_model.stan")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
sim_dat <- read.csv("Assignment_4/data/simulated_data.csv")
# load empirical data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
real_d <- read.csv("Assignment_4/data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
getwd()
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4")
file <- file.path("src/stan/GCM_model.stan")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
sim_dat <- read.csv("/data/simulated_data.csv")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024")
sim_dat <- read.csv("data/simulated_data.csv")
# Load simulated data
setwd("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4")
sim_dat <- read.csv("data/simulated_data.csv")
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
file <- file.path("src/stan/GCM_model.stan")
# Load simulated data
sim_dat <- read.csv("data/simulated_data.csv")
# load empirical data
real_d <- read.csv("Assignment_4/data/AlienData.txt")
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
file <- file.path("src/stan/GCM_model.stan")
# Load simulated data
sim_dat <- read.csv("data/simulated_data.csv")
# load empirical data
real_d <- read.csv("data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
samples_empirical <- mod$sample(
data = gcm_data_empirical,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 500
)
# Save model fits
samples_empirical$save_object("empirical_fit.rds")
# fit simulated data
samples_simulated <- mod$sample(
data = gcm_data_simulated,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 500
)
# Save model fits
samples_simulated$save_object("simulated_fit.rds")
pacman::p_load(tidyverse)
stimuli <- expand.grid(
spots = c(0,1),
legs = c(0,1),
eyes = c(0,1),
arms_up = c(0,1),
color = c(0,1)
)
# add a column named stimuli that combines the numbers for each row and keeps the originlals
stimuli <- stimuli %>%
mutate(stimuli = paste0(spots, legs, eyes, arms_up, color)) %>%
select(stimuli, everything())
# setting rules for the game, In the first session: danger depends on the alien having spots AND eyes on stalks (feature 1 AND feature 3 both being 1); nutrition depends on arms being up (feature 4 being 1).
stimuli <- stimuli %>%
mutate(
danger = ifelse(spots == 1 & eyes == 1, 1, 0)
)
# shuffle the stimuli
stimuli_shuff1 <- stimuli[sample(nrow(stimuli)), ]
stimuli_shuff2 <- stimuli_shuff1[sample(nrow(stimuli_shuff1)), ]
stimuli_shuff3 <- stimuli_shuff2[sample(nrow(stimuli_shuff2)), ]
# stack the stimuli without them mixing
stimuli_shuff <- stimuli_shuff1 %>%
bind_rows(stimuli_shuff2) %>%
bind_rows(stimuli_shuff3)
# adding ID for agent just number 1 all rows
stimuli_shuff <- stimuli_shuff %>%
mutate(ID = 1)
# add trials to stimuli_shuff
stimuli_shuff <- stimuli_shuff %>%
mutate(trials = row_number())
# distance function - might need to define that w is vector?
distance <- function(vect1, vect2, w) {
return(sum(w*abs(vect1-vect2)))
}
# similarity function
similarity <- function(distance, c) {
return(exp(-c * distance))
}
# function for predicting the dangerous response
predict_dangerous <- function(stimuli, true_c, true_w, danger) {
trials <- nrow(stimuli)
r <- c()
for (i in 1:trials){
if (i == 1 || sum(danger[1:(i-1)]) == 0 || sum(danger[1:(i-1)]) == (i-1)) {
r = c(r, 0.5)
}
else {
similarities <- c()
for (exemplar in 1:(i-1)){
dist <- distance(stimuli[i, ], stimuli[exemplar, ], true_w)
sim <- similarity(dist, true_c)
similarities <- c(similarities, sim)
}
numerator <- mean(similarities[danger[1:(i-1)] == 1])
denominator <- mean(similarities[danger[1:(i-1)] == 1]) + mean(similarities[danger[1:(i-1)] == 0])
r <- c(r, numerator/denominator)
}
}
return(rbinom(trials,1,r)) # probabilistic response - not deterministic
}
stimuli_shuff$dangerous <- predict_dangerous(
stimuli = stimuli_shuff[, 2:6],
true_c = 2,
true_w = c(0.5, 0.5, 2, 0.5, 1),
danger = stimuli_shuff$danger
)
# adding "correct" column. 1 when danger and dangerous are equal and 0 when not
stimuli_shuff <- stimuli_shuff %>%
mutate(correct = ifelse(danger == dangerous, 1, 0))
View(stimuli_shuff)
# save simulated data as csv
write_csv(stimuli_shuff, "simulated_data.csv")
knitr::opts_knit$set(root.dir = normalizePath("/Users/tildeidunsloth/Documents/GitHub/ACM2024/Assignment_4"))
# read packages
pacman::p_load(tidyverse,
here,
posterior,
cmdstanr,
brms, tidybayes)
# Specify where the model is
file <- file.path("src/stan/GCM_model.stan")
# Load simulated data
sim_dat <- read.csv("data/simulated_data.csv")
# load empirical data
real_d <- read.csv("data/AlienData.txt")
# make subset for subject 1 and session 1 and condition 1
real_d <- real_d[real_d$subject == 1 & real_d$session == 1 & real_d$condition == 1, ]
# create a column "danger" with 1 for "danger" and 0 for "safe". If category is 3 or 4, it is "danger", otherwise "safe"
real_d$danger <- ifelse(real_d$category %in% c(3, 4), 1, 0)
# convert stimulus into features
real_d <- real_d %>%
mutate(
stim_str = gsub(".jpg", "", stimulus)
) %>%
mutate(
spots   = as.integer(substr(stim_str, 1, 1)),
legs    = as.integer(substr(stim_str, 2, 2)),
eyes    = as.integer(substr(stim_str, 3, 3)),
arms_up = as.integer(substr(stim_str, 4, 4)),
color   = as.integer(substr(stim_str, 5, 5))
) %>%
select(-stim_str)
# remove rows with test = 1
real_d <- real_d[real_d$test == 0, ]
# prepare data empirical
gcm_data_empirical <- list(
trials = nrow(real_d),
nfeatures = 5,
danger = real_d$danger,
response = real_d$dangerous,
stimuli = as.matrix(real_d[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# prepare data simulated
gcm_data_simulated <- list(
trials = nrow(sim_dat),
nfeatures = 5,
danger = sim_dat$danger,
response = sim_dat$dangerous,
stimuli = as.matrix(sim_dat[, c("spots", "legs", "eyes", "arms_up", "color")]),
w_prior_values = c(1, 1, 1, 1, 1), # uniform prior
c_prior_values = c(0, 1) # mean and sd of the prior
)
# fit empirical data
# Compiling the model
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
samples_empirical <- mod$sample(
data = gcm_data_empirical,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 500
)
# Save model fits
samples_empirical$save_object("empirical_fit.rds")
# fit simulated data
samples_simulated <- mod$sample(
data = gcm_data_simulated,
seed = 123,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 500
)
# Save model fits
samples_simulated$save_object("simulated_fit.rds")
