geom_point(x = sum(data$selfchoice), y = 0, color = "green", shape = 17, size = 5) +
labs(title = "Posterior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Prior-posterior update checks
gridExtra::grid.arrange(
ggplot(draws_df) +
geom_histogram(aes(theta_w_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_w_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.8), linetype = "dashed", color = "black", size = 1.5) +
labs(title = "Prior-posterior update checks") +
theme_classic(),
ggplot(draws_df) +
geom_histogram(aes(theta_l_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_l_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.9), linetype = "dashed", color = "black", size = 1.5) +
labs(title = " ") +
theme_classic(),
nrow = 1
)
# Posterior Predictive Checks
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
geom_histogram(aes(pred_posterior), color = "darkblue", fill = "blue", alpha = 0.3, bins = 90) +
geom_point(x = sum(data$selfchoice), y = 0, color = "darkgreen", shape = 17, size = 5) +
labs(title = "Posterior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Posterior Predictive Checks
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
geom_histogram(aes(pred_posterior), color = "darkblue", fill = "blue", alpha = 0.3, bins = 90) +
geom_point(x = sum(data$selfchoice), y = 0, color = "white", shape = 17, size = 5) +
labs(title = "Posterior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Posterior Predictive Checks
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
geom_histogram(aes(pred_posterior), color = "darkblue", fill = "blue", alpha = 0.3, bins = 90) +
geom_point(x = sum(data$selfchoice), y = 0, color = "black", shape = 17, size = 5) +
labs(title = "Posterior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Checking the model's chains
gridExtra::grid.arrange(
ggplot(draws_df, aes(.iteration, theta_w, group = .chain, color = .chain)) +
geom_line() +
labs(title = "Model chains", subtitle = "Theta w") + theme_classic(),
ggplot(draws_df, aes(.iteration, theta_l, group = .chain, color = .chain)) + geom_line() + labs(subtitle = "Theta l") + theme_classic(),
nrow = 2
)
# Prior predictive check
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "lightblue", fill = "red", alpha = 0.3, bins = 90) +
labs(title = "Prior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Prior predictive check
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
labs(title = "Prior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Posterior Predictive Checks
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
geom_histogram(aes(pred_posterior), color = "blue", fill = "blue", alpha = 0.3, bins = 90) +
geom_point(x = sum(data$selfchoice), y = 0, color = "black", shape = 17, size = 5) +
labs(title = "Posterior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Prior-posterior update checks
gridExtra::grid.arrange(
ggplot(draws_df) +
geom_histogram(aes(theta_w_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_w_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.8), linetype = "dashed", color = "black", size = 1.5) +
labs(title = "Prior-posterior update checks") +
theme_classic(),
ggplot(draws_df) +
geom_histogram(aes(theta_l_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_l_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.9), linetype = "dashed", color = "black", size = 1.5) +
labs(title = " ") +
theme_classic(),
nrow = 1
)
# File path for saved recovery results
recovery_file <- "simdata/W3_recoverydf_parallel.csv"
# Check if we need to run the parameter recovery
if (regenerate_simulations || !file.exists(recovery_file)) {
# Load necessary packages for parallelization
pacman::p_load(future, purrr, furrr)
# Set up parallel processing (adjust workers based on your system)
plan(multisession, workers = 4)
# Define the function that will be run on each core separately
sim_d_and_fit <- function(seed, trials, rateLvl, noiseLvl) {
# Generate random choices
randomChoice <- rep(NA, trials)
for (t in seq(trials)) {
randomChoice[t] <- RandomAgentNoise_f(rateLvl, noiseLvl)
}
# Create data for Stan
data <- list(
n = trials,
h = randomChoice
)
# Compile the model
file <- file.path("stan/W3_SimpleBernoulli_logodds.stan")
mod <- cmdstan_model(file,
cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
# Fit the model
samples_recovery <- mod$sample(
data = data,
seed = 1000,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 2000,
refresh = 0,
max_treedepth = 20,
adapt_delta = 0.99,
)
# Extract results
draws_df_recovery <- as_draws_df(samples_recovery$draws())
# Check for parameter name
cat("Parameters available:", paste(colnames(draws_df_recovery), collapse=", "), "\n")
# Extract theta parameter
theta_param <- draws_df_recovery$theta
temp <- tibble(biasEst = inv_logit_scaled(theta_param),
biasTrue = rateLvl,
noise = noiseLvl)
return(temp)
}
# Create a tibble with all parameter combinations
param_combinations <- tibble(
rateLvl = rep(seq(0, 1, 0.1), each = 6),
noiseLvl = rep(seq(0, 0.5, 0.1), 11),
seed = 1000,
trials = 120
)
# Run the function on each parameter combination in parallel
recovery_df <- future_pmap_dfr(
param_combinations,
sim_d_and_fit,
.options = furrr_options(seed = TRUE)
)
# Save results for future use
write_csv(recovery_df, recovery_file)
cat("Generated new parameter recovery results and saved to", recovery_file, "\n")
} else {
# Load existing results
recovery_df <- read_csv(recovery_file)
cat("Loaded existing parameter recovery results from", recovery_file, "\n")
}
# File path for saved recovery results
recovery_file <- "simdata/recoverydf_parallel.csv"
# File path for saved recovery results
recovery_file <- "simdata/recoverydf_parallel.csv"
# Agent
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
# Check if we need to run the parameter recovery
if (regenerate_simulations || !file.exists(recovery_file)) {
# Load necessary packages for parallelization
pacman::p_load(future, purrr, furrr)
# Set up parallel processing (adjust workers based on your system)
plan(multisession, workers = 4)
# Define the function that will be run on each core separately
sim_d_and_fit <- function(seed, trials, prevChoice, Feedback) {
# Generate random choices
agentChoice <- rep(NA, trials)
for (t in seq(trials)) {
agentChoice[t] <- Asymmetric_WSLS_agent(prevChoice, Feedback)
}
# Create data for Stan
data <- list(
n = trials,
h = randomChoice
)
# Compile the model
file <- file.path("stan/AssymetricWSLS.stan")
mod <- cmdstan_model(file,
cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
# Fit the model
samples_recovery <- mod$sample(
data = data,
seed = 1000,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 2000,
refresh = 0,
max_treedepth = 20,
adapt_delta = 0.99,
)
# Extract results
draws_df_recovery <- as_draws_df(samples_recovery$draws())
# Check for parameter name
cat("Parameters available:", paste(colnames(draws_df_recovery), collapse=", "), "\n")
# Extract theta parameter
theta_param <- draws_df_recovery$theta
temp <- tibble(biasEst = inv_logit_scaled(theta_param),
biasTrue = rateLvl,
noise = noiseLvl)
return(temp)
}
# Create a tibble with all parameter combinations
param_combinations <- tibble(
rateLvl = rep(seq(0, 1, 0.1), each = 6),
noiseLvl = rep(seq(0, 0.5, 0.1), 11),
seed = 1000,
trials = 120
)
# Run the function on each parameter combination in parallel
recovery_df <- future_pmap_dfr(
param_combinations,
sim_d_and_fit,
.options = furrr_options(seed = TRUE)
)
# Save results for future use
write_csv(recovery_df, recovery_file)
cat("Generated new parameter recovery results and saved to", recovery_file, "\n")
} else {
# Load existing results
recovery_df <- read_csv(recovery_file)
cat("Loaded existing parameter recovery results from", recovery_file, "\n")
}
# Set this to TRUE when you want to regenerate all simulation results
# Otherwise, existing results will be loaded
regenerate_simulations <- TRUE
# File path for saved recovery results
recovery_file <- "simdata/recoverydf_parallel.csv"
# Agent
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
# Check if we need to run the parameter recovery
if (regenerate_simulations || !file.exists(recovery_file)) {
# Load necessary packages for parallelization
pacman::p_load(future, purrr, furrr)
# Set up parallel processing (adjust workers based on your system)
plan(multisession, workers = 4)
# Define the function that will be run on each core separately
sim_d_and_fit <- function(seed, trials, prevChoice, Feedback) {
# Generate random choices
agentChoice <- rep(NA, trials)
for (t in seq(trials)) {
agentChoice[t] <- Asymmetric_WSLS_agent(prevChoice, Feedback)
}
# Create data for Stan
data <- list(
n = trials,
h = randomChoice
)
# Compile the model
file <- file.path("stan/AssymetricWSLS.stan")
mod <- cmdstan_model(file,
cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
# Fit the model
samples_recovery <- mod$sample(
data = data,
seed = 1000,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 2000,
refresh = 0,
max_treedepth = 20,
adapt_delta = 0.99,
)
# Extract results
draws_df_recovery <- as_draws_df(samples_recovery$draws())
# Check for parameter name
cat("Parameters available:", paste(colnames(draws_df_recovery), collapse=", "), "\n")
# Extract theta parameter
theta_param <- draws_df_recovery$theta
temp <- tibble(biasEst = inv_logit_scaled(theta_param),
biasTrue = rateLvl,
noise = noiseLvl)
return(temp)
}
# Create a tibble with all parameter combinations
param_combinations <- tibble(
rateLvl = rep(seq(0, 1, 0.1), each = 6),
noiseLvl = rep(seq(0, 0.5, 0.1), 11),
seed = 1000,
trials = 120
)
# Run the function on each parameter combination in parallel
recovery_df <- future_pmap_dfr(
param_combinations,
sim_d_and_fit,
.options = furrr_options(seed = TRUE)
)
# Save results for future use
write_csv(recovery_df, recovery_file)
cat("Generated new parameter recovery results and saved to", recovery_file, "\n")
} else {
# Load existing results
recovery_df <- read_csv(recovery_file)
cat("Loaded existing parameter recovery results from", recovery_file, "\n")
}
# Set this to TRUE when you want to regenerate all simulation results
# Otherwise, existing results will be loaded
regenerate_simulations <- TRUE
# File path for saved recovery results
recovery_file <- "simdata/recoverydf_parallel.csv"
# Agent
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
# Check if we need to run the parameter recovery
if (regenerate_simulations || !file.exists(recovery_file)) {
# Load necessary packages for parallelization
pacman::p_load(future, purrr, furrr)
# Set up parallel processing (adjust workers based on your system)
plan(multisession, workers = 4)
# Define the function that will be run on each core separately
sim_d_and_fit <- function(seed, trials, prevChoice, Feedback) {
# Generate random choices
agentChoice <- rep(NA, trials)
for (t in seq(trials)) {
agentChoice[t] <- Asymmetric_WSLS_agent(prevChoice, Feedback)
}
# Create data for Stan
data <- list(
n = trials,
h = randomChoice
)
# Compile the model
file <- file.path("stan/AssymetricWSLS.stan")
mod <- cmdstan_model(file,
cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
# Fit the model
samples_recovery <- mod$sample(
data = data,
seed = 1000,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 2000,
refresh = 0,
max_treedepth = 20,
adapt_delta = 0.99,
)
# Extract results
draws_df_recovery <- as_draws_df(samples_recovery$draws())
# Check for parameter name
cat("Parameters available:", paste(colnames(draws_df_recovery), collapse=", "), "\n")
# Extract theta parameter
theta_param <- draws_df_recovery$theta
temp <- tibble(biasEst = inv_logit_scaled(theta_param),
biasTrue = rateLvl,
noise = noiseLvl)
return(temp)
}
# Create a tibble with all parameter combinations
param_combinations <- tibble(
rateLvl = rep(seq(0, 1, 0.1), each = 6),
noiseLvl = rep(seq(0, 0.5, 0.1), 11),
seed = 1000,
trials = 120
)
# Run the function on each parameter combination in parallel
recovery_df <- future_pmap_dfr(
param_combinations,
sim_d_and_fit,
.options = furrr_options(seed = TRUE)
)
# Save results for future use
write_csv(recovery_df, recovery_file)
cat("Generated new parameter recovery results and saved to", recovery_file, "\n")
} else {
# Load existing results
recovery_df <- read_csv(recovery_file)
cat("Loaded existing parameter recovery results from", recovery_file, "\n")
}
# Set this to TRUE when you want to regenerate all simulation results
# Otherwise, existing results will be loaded
regenerate_simulations <- TRUE
# File path for saved recovery results
recovery_file <- "simdata/recoverydf_parallel.csv"
# Agent
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
# Check if we need to run the parameter recovery
if (regenerate_simulations || !file.exists(recovery_file)) {
# Load necessary packages for parallelization
pacman::p_load(future, purrr, furrr)
# Set up parallel processing (adjust workers based on your system)
plan(multisession, workers = 4)
# Define the function that will be run on each core separately
sim_d_and_fit <- function(seed, trials, prevChoice, Feedback) {
# Generate random choices
agentChoice <- rep(NA, trials)
for (t in seq(trials)) {
agentChoice[t] <- Asymmetric_WSLS_agent(prevChoice, Feedback)
}
# Create data for Stan
data <- list(
n = trials,
h = randomChoice
)
# Compile the model
file <- file.path("stan/AssymetricWSLS.stan")
mod <- cmdstan_model(file,
cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
# Fit the model
samples_recovery <- mod$sample(
data = data,
seed = 1000,
chains = 1,
parallel_chains = 1,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 2000,
refresh = 0,
max_treedepth = 20,
adapt_delta = 0.99,
)
# Extract results
draws_df_recovery <- as_draws_df(samples_recovery$draws())
# Check for parameter name
cat("Parameters available:", paste(colnames(draws_df_recovery), collapse=", "), "\n")
# Extract theta parameter
theta_param <- draws_df_recovery$theta
temp <- tibble(biasEst = inv_logit_scaled(theta_param),
biasTrue = rateLvl,
noise = noiseLvl)
return(temp)
}
# Create a tibble with all parameter combinations
param_combinations <- tibble(
rateLvl = rep(seq(0, 1, 0.1), each = 6),
noiseLvl = rep(seq(0, 0.5, 0.1), 11),
seed = 1000,
trials = 120
)
# Run the function on each parameter combination in parallel
recovery_df <- future_pmap_dfr(
param_combinations,
sim_d_and_fit,
.options = furrr_options(seed = TRUE)
)
# Save results for future use
write_csv(recovery_df, recovery_file)
cat("Generated new parameter recovery results and saved to", recovery_file, "\n")
} else {
# Load existing results
recovery_df <- read_csv(recovery_file)
cat("Loaded existing parameter recovery results from", recovery_file, "\n")
}
# Load simulated data
d <- read.csv("data/simulated_WSLSvsMEM7.csv")
# Load draws from fit
draws_df <- as_draws_df(samples$draws())
# Load simulated data
d <- read.csv("data/simulated_WSLSvsMEM7.csv")
# Load draws from fit
draws_df <- as_draws_df(samples$draws())
# Load draws from fit
draws_df <- as_draws_df(samples$draws())
# Load draws from fit
samples <- readRDS("simmodels/AWSLS.rds")
draws_df <- as_draws_df(samples$draws())
# Load draws from fit
samples <- readRDS("simmodels/AWSLS.rds")
draws_df <- as_draws_df(samples$draws())
# Prior-posterior update checks
gridExtra::grid.arrange(
ggplot(draws_df) +
geom_histogram(aes(theta_w_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_w_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.8), linetype = "dashed", color = "black", size = 1.5) +
labs(title = "Prior-posterior update checks") +
theme_classic(),
ggplot(draws_df) +
geom_histogram(aes(theta_l_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_l_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.9), linetype = "dashed", color = "black", size = 1.5) +
labs(title = " ") +
theme_classic(),
nrow = 1
)
