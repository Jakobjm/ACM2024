View(results)
# plotting strategie choices against each other
ggplot(results, aes(x = WSLS, y = MEM)) + geom_point(alpha = 0.5) + geom_smooth(method = "lm", se = FALSE) + theme_minimal() + labs(title = "WSLS vs Memory Agent", x = "WSLS", y = "Memory Agent")
# plotting hider vs matcher strategy
ggplot(results, aes(trial, fill = factor(agent))) +
geom_bar(aes(y = WSLS), position = "dodge") +
geom_bar(aes(y = MEM), position = "dodge") +
labs(title = "WSLS vs Memory Agent", x = "Trial", y = "Frequency") +
scale_fill_manual(values = c("red", "blue")) +
theme_minimal()
# Setting up results data frame
results <- tibble(trial = rep(1:trials, agents),
agent = rep(1:agents, each = trials),
Self = NA, Other = NA, Feedback = NA)
# Loop through agents
df1 <- map_dfr(seq(agents), function(agent) {
Self <- rep(NA, trials)
Other <- rep(NA, trials)
prevOChoices <- rep(0.5, memory_slot)
Self[1] <- rbinom(1, 1, 0.5)
Other[1] <- rbinom(1, 1, 0.5)
for (i in 2:trials) {
Feedback <- as.numeric(Self[i - 1] == Other[i - 1])
Self[i] <- Asymmetric_WSLS_agent(Self[i - 1], Feedback)
Other[i] <- Memory_agent(prevOChoices)
prevOChoices <- c(prevOChoices[-1], Self[i])  # Shift memory
}
tibble(Self, Other, trial = 1:trials, Feedback, agent)
})
# Merge into results
results <- results %>%
mutate(Self = df1$Self, Other = df1$Other, Feedback = df1$Feedback)
View(results)
# Setting up results data frame
results <- data.frame(trial = rep(1:trials, agents),
agent = rep(1:agents, each = trials),
Self = rep(NA, trials * agents),
Other = rep(NA, trials * agents))
# Loop through agents
for (agent in seq(agents)) {
Self <- rep(NA, trials)  # WSLS (even player)
Other <- rep(NA, trials) # MEM (odd player)
Self[1] <- rbinom(1,1,0.5)  # Random first choice
Other[1] <- rbinom(1,1,0.5) # Random first choice
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
# Loop through trials
for (i in 2:trials) {
if (Self[i - 1] == Other[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
Self[i] <- Asymmetric_WSLS_agent(Self[i - 1], Feedback)
Other[i] <- Memory_agent(prevOChoices)
prevOChoices <- c(prevOChoices[2:memory_slot], Self[i])  # Update memory with last WSLS choice
}
# Store results in dataframe
temp <- tibble(Self, Other, trial = seq(trials), Feedback = as.numeric(Self == Other), agent)
if (agent == 1) {
df1 <- temp
} else {
df1 <- bind_rows(df1, temp)
}
}
# Merge df1 into results
results$Self <- df1$Self
results$Other <- df1$Other
View(results)
df1 <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # Self player
MEM <- rep(NA, trials)   # Opponent player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(WSLS, MEM, trial = seq(trials), Feedback = as.numeric(WSLS == MEM), agent)
# Append to dataframe
if (agent == 1) {
df1 <- temp
} else {
df1 <- bind_rows(df1, temp)
}
}
View(df1)
# Number of trials per simulation
trials <- 120
# Number of agents to simulate
agents <- 100
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
Memory_agent <- function(prevOChoices){
choice = rbinom(1,1,mean(prevOChoices))
return(choice)
}
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (i in 2:trials){
if (WSLS[i-1] == MEM[i-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i-1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[i])
}
results <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # Self player
MEM <- rep(NA, trials)   # Opponent player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(trial = seq(trials),agent, WSLS, MEM, Feedback = as.numeric(WSLS == MEM), )
# Append to dataframe
if (agent == 1) {
results <- temp
} else {
results <- bind_rows(results, temp)
}
}
View(results)
results <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # "Self" player
MEM <- rep(NA, trials)   # "Opponent" player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over 120 trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(trial = seq(trials),agent, WSLS, MEM, Feedback = as.numeric(WSLS == MEM))
# Append to dataframe
if (agent == 1) {
results <- temp
} else {
results <- bind_rows(results, temp)
}
}
View(results)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, ggplot2)
set.seed(2001)
# Number of trials per simulation
trials <- 120
# Number of agents to simulate
agents <- 100
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
Memory_agent <- function(prevOChoices){
choice = rbinom(1,1,mean(prevOChoices))
return(choice)
}
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (i in 2:trials){
if (WSLS[i-1] == MEM[i-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i-1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[i])
}
results <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # "Self" player
MEM <- rep(NA, trials)   # "Opponent" player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over 120 trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(trial = seq(trials),agent, WSLS, MEM, Feedback = as.numeric(WSLS == MEM))
# Append to dataframe
if (agent == 1) {
results <- temp
} else {
results <- bind_rows(results, temp)
}
}
library(ggplot2)
plot1 <- ggplot(results, aes(x = trial)) +
geom_line(aes(y = WSLS_choice, color = "red"), alpha = 0.7) +
geom_line(aes(y = MEM_choice, color = "blue"), alpha = 0.7) +
labs(title = "Agent Choices Over Time",
x = "Trial",
y = "Choice (0 or 1)",
color = "Agent") +
theme_minimal()
ggsave("Agent_Choice_Over_Time.png", plot1, width = 8, height = 6, dpi = 300)
setwd("~/")
setwd("C:/Users/szh/Desktop/ACM/ACM2024/Assignment_2")
sample(1:8, size=100, replace=True)
sample(1:8, size=100, replace=true)
sample(1:8, size=100, replace=True)
sample(1:8, size=100, replace=T)
list = sample(1:8, size=100, replace=T)
list = sample(c(1:8), size=100, replace=T)
list = sample(1:8, size=100, replace=T)
list = sample(c(1:8), size=100, replace=T)
trials <- 153
ID_n <- 40
trials <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA; trials)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials)
ID <- rep(NA, ID_n)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials)
ID <- rep(NA, ID_n)
for (j in seq(ID_n)){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID = j
}
df <- data.frame(ID, trials, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
View(df)
for (j in seq(ID_n)){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
}
df <- data.frame(ID, trials, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
trials <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials)
ID <- rep(NA, ID_n)
for (j in seq(ID_n)){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
}
df <- data.frame(ID, trials, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
trials <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials)
ID <- rep(NA, ID_n)
for (j in 1:ID_n){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
}
df <- data.frame(ID, trials, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
for (j in 1:ID_n){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
}
trials <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials)
ID <- rep(NA, ID_n)
for (j in 1:ID_n){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
}
df <- data.frame(ID, trials, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
trials <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials*ID_n, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials*ID_n, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials)
ID <- rep(NA, ID_n)
for (j in 1:ID_n){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
}
df <- data.frame(ID, trials, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
View(df)
trials_n<- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials_n)
ID <- rep(NA, ID_n)
trial <- rep(NA, trials_n)
for (j in 1:ID_n){
for (i in 1:trials){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
trial[i] = i
}
df <- data.frame(ID, trial, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
View(df)
trials_n<- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials_n)
ID <- rep(NA, ID_n)
trial <- rep(NA, trials_n)
for (j in 1:ID_n){
for (i in 1:trials_n){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
trial[i] = i
}
df <- data.frame(ID, trial, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
View(df)
trials_n<- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Defining empty list for SecondRating
SecondRating <- rep(NA, trials_n)
ID <- rep(NA, ID_n)
trial <- rep(NA, trials_n)
for (j in 1:ID_n){
for (i in 1:trials_n){
SecondRating[i]=SimpleBayesAgent(FirstRating[i],GroupRating[i])
}
ID[j] = j
trial[i] = i
}
df <- data.frame(ID, trial, FirstRating, GroupRating, SecondRating, Feedback = GroupRating-FirstRating, Change = SecondRating-FirstRating)
trials_n <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating) {
round((FirstRating + GroupRating) / 2)
}
# Create a data frame with all ID and trial combinations
df <- expand.grid(ID = 1:ID_n, trial = 1:trials_n)
# Generate random ratings
df$FirstRating <- sample(1:8, size = nrow(df), replace = TRUE)
df$GroupRating <- sample(1:8, size = nrow(df), replace = TRUE)
# Compute SecondRating using vectorized operations
df$SecondRating <- mapply(SimpleBayesAgent, df$FirstRating, df$GroupRating)
# Compute Feedback and Change
df$Feedback <- df$GroupRating - df$FirstRating
df$Change <- df$SecondRating - df$FirstRating
head(df)
View(df)
View(df)
trials_n <- 153
ID_n <- 40
# Function for agent
SimpleBayesAgent <- function(FirstRating, GroupRating){
SecondRating = round((FirstRating + GroupRating)/2)
return(SecondRating)
}
# Simulating first ratings
FirstRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Simulating group ratings
GroupRating <- sample(1:8, size=trials_n*ID_n, replace=T)
# Create empty vectors
ID <- rep(NA, trials_n * ID_n)
trial <- rep(NA, trials_n * ID_n)
SecondRating <- rep(NA, trials_n * ID_n)
# Fill values correctly
index <- 1
for (j in 1:ID_n){
for (i in 1:trials_n){
SecondRating[index] <- SimpleBayesAgent(FirstRating[index], GroupRating[index])
ID[index] <- j
trial[index] <- i
index <- index + 1
}
}
df <- data.frame(ID, trial, FirstRating, GroupRating, SecondRating,
Feedback = GroupRating - FirstRating,
Change = SecondRating - FirstRating)
head(df)
View(df)
