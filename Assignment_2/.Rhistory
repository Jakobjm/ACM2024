## Check for existing installations
stan_packages <- installed.packages()[
grepl("cmdstanr|rstan$|StanHeaders|brms$",
installed.packages()[, 1]), 1]
## Remove any existing Stan packages
if (length(stan_packages) > 0) {
remove.packages(c("StanHeaders", "rstan", "brms"))
}
## Delete any pre-existing RData file
if (file.exists(".RData")) {
file.remove(".RData")
}
}
{
## Retrieve installed packages
pkgs <- installed.packages()[, 1]
## Check if rstudioapi is installed
if (isTRUE(all.equal(grep("rstudioapi", pkgs), integer(0)))) {
print("Installing the {rstudioapi} package")
install.packages("rstudioapi")
}
## Check if remotes is installed
if (isTRUE(all.equal(grep("remotes", pkgs), integer(0)))) {
print("Installing the {remotes} package")
install.packages("remotes")
}
## Else print a message
else {
print("{remotes} and {rstudioapi} packages are already installed")
}
}
install.packages(
pkgs = "rstan",
repos = c(
"https://mc-stan.org/r-packages/",
getOption("repos")
))
example(stan_model, package = "rstan", run.dontrun = TRUE)
rstudioapi::restartSession()
remotes::install_github("paul-buerkner/brms")
remotes::install_github("stan-dev/cmdstanr")
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
cmdstanr::install_cmdstan(
cores = parallel::detectCores(logical = FALSE),
overwrite = TRUE,
cpp_options = list("STAN_THREADS" = TRUE),
check_toolchain = TRUE
)
(cmdstan.version <- cmdstanr::cmdstan_version())
cmdstanr::set_cmdstan_path(
path = paste(
Sys.getenv("HOME"),
"/.cmdstan/cmdstan-",
cmdstan.version,
sep = ""
))
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
check_cmdstan_toolchain()
install_cmdstan()
install_cmdstan(fix = TRUE)
cmdstanr::cmdstan_path()
cmdstanr::set_cmdstan_path(path = "C:/Users/szh/.cmdstan/cmdstan-2.36.0")
cmdstanr::set_cmdstan_path(
path = paste(
Sys.getenv("HOME"),
"/.cmdstan/cmdstan-",
cmdstan.version,
sep = ""
))
cmdstanr::set_cmdstan_path(path = "C:/Users/szh/.cmdstan/cmdstan-2.36.0")
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
cmdstanr::set_cmdstan_path(path = "C:/Users/szh/.cmdstan/cmdstan-2.36.0")
cmdstanr::cmdstan_path()
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
cmdstanr::list_cmdstan_toolchains()
Sys.which("make")
Sys.getenv("RTOOLS40_HOME")
Sys.getenv("RTOOLS40_HOME")
Sys.getenv("RTOOLS44_HOME")
Sys.which("mingw32-make")
Sys.which("make")
rstudioapi::terminalExecute(
command = "make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
cmdstanr::cmdstan_path()
cmdstanr::check_cmdstan_toolchain()
library(cmdstanr)
stan_code <- "
parameters {
real y;
}
model {
y ~ normal(0,1);
}
"
# Write model to file
stan_file <- file.path(tempdir(), "test_model.stan")
writeLines(stan_code, stan_file)
# Compile the model
mod <- cmdstan_model(stan_file)
# Sample from the model
fit <- mod$sample(data = list(), seed = 123, chains = 4, parallel_chains = 2)
# Print results
print(fit)
install.packages("usethis")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, ggplot2)
set.seed(2001)
# Number of trials per simulation
trials <- 120
# Number of agents to simulate
agents <- 100
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
Memory_agent <- function(prevOChoices){
choice = rbinom(1,1,mean(prevOChoices))
return(choice)
}
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (i in 2:trials){
if (WSLS[i-1] == MEM[i-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i-1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[i])
}
# looping 100 agents through the game
WSLS_agents <- matrix(NA, nrow = trials, ncol = agents)
MEM_agents <- matrix(NA, nrow = trials, ncol = agents)
for (i in 1:agents){
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (j in 2:trials){
if (WSLS[j-1] == MEM[j-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[j] <- Asymmetric_WSLS_agent(WSLS[j-1], Feedback)
MEM[j] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[j])
}
WSLS_agents[,i] <- WSLS
MEM_agents[,i] <- MEM
}
View(MEM_agents)
View(WSLS_agents)
View(MEM_agents)
View(WSLS_agents)
View(MEM_agents)
# looping 100 agents through the game
# make a dataframe to store the results of the game, both types of agents, all agents and all trials in the same dataframe
results <- data.frame(trial = rep(1:trials, agents), agent = rep(1:agents, each = trials), WSLS = rep(NA, trials*agents), MEM = rep(NA, trials*agents))
for (i in 1:agents){
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (j in 2:trials){
if (WSLS[j-1] == MEM[j-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[j] <- Asymmetric_WSLS_agent(WSLS[j-1], Feedback)
MEM[j] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[j])
}
results$WSLS[results$agent == i] <- WSLS
results$MEM[results$agent == i] <- MEM
}
View(results)
# plotting strategie choices against each other
ggplot(results, aes(x = WSLS, y = MEM)) + geom_point(alpha = 0.5) + geom_smooth(method = "lm", se = FALSE) + theme_minimal() + labs(title = "WSLS vs Memory Agent", x = "WSLS", y = "Memory Agent")
# plotting hider vs matcher strategy
ggplot(results, aes(trial, fill = factor(agent))) +
geom_bar(aes(y = WSLS), position = "dodge") +
geom_bar(aes(y = MEM), position = "dodge") +
labs(title = "WSLS vs Memory Agent", x = "Trial", y = "Frequency") +
scale_fill_manual(values = c("red", "blue")) +
theme_minimal()
# Setting up results data frame
results <- tibble(trial = rep(1:trials, agents),
agent = rep(1:agents, each = trials),
Self = NA, Other = NA, Feedback = NA)
# Loop through agents
df1 <- map_dfr(seq(agents), function(agent) {
Self <- rep(NA, trials)
Other <- rep(NA, trials)
prevOChoices <- rep(0.5, memory_slot)
Self[1] <- rbinom(1, 1, 0.5)
Other[1] <- rbinom(1, 1, 0.5)
for (i in 2:trials) {
Feedback <- as.numeric(Self[i - 1] == Other[i - 1])
Self[i] <- Asymmetric_WSLS_agent(Self[i - 1], Feedback)
Other[i] <- Memory_agent(prevOChoices)
prevOChoices <- c(prevOChoices[-1], Self[i])  # Shift memory
}
tibble(Self, Other, trial = 1:trials, Feedback, agent)
})
# Merge into results
results <- results %>%
mutate(Self = df1$Self, Other = df1$Other, Feedback = df1$Feedback)
View(results)
# Setting up results data frame
results <- data.frame(trial = rep(1:trials, agents),
agent = rep(1:agents, each = trials),
Self = rep(NA, trials * agents),
Other = rep(NA, trials * agents))
# Loop through agents
for (agent in seq(agents)) {
Self <- rep(NA, trials)  # WSLS (even player)
Other <- rep(NA, trials) # MEM (odd player)
Self[1] <- rbinom(1,1,0.5)  # Random first choice
Other[1] <- rbinom(1,1,0.5) # Random first choice
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
# Loop through trials
for (i in 2:trials) {
if (Self[i - 1] == Other[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
Self[i] <- Asymmetric_WSLS_agent(Self[i - 1], Feedback)
Other[i] <- Memory_agent(prevOChoices)
prevOChoices <- c(prevOChoices[2:memory_slot], Self[i])  # Update memory with last WSLS choice
}
# Store results in dataframe
temp <- tibble(Self, Other, trial = seq(trials), Feedback = as.numeric(Self == Other), agent)
if (agent == 1) {
df1 <- temp
} else {
df1 <- bind_rows(df1, temp)
}
}
# Merge df1 into results
results$Self <- df1$Self
results$Other <- df1$Other
View(results)
df1 <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # Self player
MEM <- rep(NA, trials)   # Opponent player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(WSLS, MEM, trial = seq(trials), Feedback = as.numeric(WSLS == MEM), agent)
# Append to dataframe
if (agent == 1) {
df1 <- temp
} else {
df1 <- bind_rows(df1, temp)
}
}
View(df1)
# Number of trials per simulation
trials <- 120
# Number of agents to simulate
agents <- 100
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
Memory_agent <- function(prevOChoices){
choice = rbinom(1,1,mean(prevOChoices))
return(choice)
}
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (i in 2:trials){
if (WSLS[i-1] == MEM[i-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i-1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[i])
}
results <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # Self player
MEM <- rep(NA, trials)   # Opponent player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(trial = seq(trials),agent, WSLS, MEM, Feedback = as.numeric(WSLS == MEM), )
# Append to dataframe
if (agent == 1) {
results <- temp
} else {
results <- bind_rows(results, temp)
}
}
View(results)
results <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # "Self" player
MEM <- rep(NA, trials)   # "Opponent" player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over 120 trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(trial = seq(trials),agent, WSLS, MEM, Feedback = as.numeric(WSLS == MEM))
# Append to dataframe
if (agent == 1) {
results <- temp
} else {
results <- bind_rows(results, temp)
}
}
View(results)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, ggplot2)
set.seed(2001)
# Number of trials per simulation
trials <- 120
# Number of agents to simulate
agents <- 100
Asymmetric_WSLS_agent <- function(prevChoice, Feedback){
if(Feedback == 1){ choice = ifelse(rbinom(1,1,0.8)==1,prevChoice,1-prevChoice)}
else if(Feedback == 0){ choice = ifelse(rbinom(1,1,0.9)==1,1-prevChoice,prevChoice)}
return(choice)
}
Memory_agent <- function(prevOChoices){
choice = rbinom(1,1,mean(prevOChoices))
return(choice)
}
WSLS<- rep(NA, trials) #Even player
MEM <- rep(NA, trials) #Odd player
WSLS[1] <- rbinom(1,1,0.5)
MEM[1] <- rbinom(1,1,0.5)
memory_slot <- 7
prevOChoices <- rep(0.5, memory_slot)
for (i in 2:trials){
if (WSLS[i-1] == MEM[i-1]){
Feedback = 1
} else {Feedback = 0}
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i-1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
prevOChoices = c(prevOChoices[2:memory_slot],WSLS[i])
}
results <- tibble()  # Initialize empty dataframe
for (agent in seq(agents)) {
WSLS <- rep(NA, trials)  # "Self" player
MEM <- rep(NA, trials)   # "Opponent" player
# Initial random choices
WSLS[1] <- rbinom(1, 1, 0.5)
MEM[1] <- rbinom(1, 1, 0.5)
# Iterate over 120 trials
for (i in 2:trials) {
if (WSLS[i - 1] == MEM[i - 1]) {
Feedback <- 1
} else {
Feedback <- 0
}
# Update WSLS and Memory Agent choices
WSLS[i] <- Asymmetric_WSLS_agent(WSLS[i - 1], Feedback)
MEM[i] <- Memory_agent(prevOChoices)
# Update memory storage
prevOChoices <- c(prevOChoices[2:memory_slot], WSLS[i])
}
# Store results
temp <- tibble(trial = seq(trials),agent, WSLS, MEM, Feedback = as.numeric(WSLS == MEM))
# Append to dataframe
if (agent == 1) {
results <- temp
} else {
results <- bind_rows(results, temp)
}
}
library(ggplot2)
plot1 <- ggplot(results, aes(x = trial)) +
geom_line(aes(y = WSLS_choice, color = "red"), alpha = 0.7) +
geom_line(aes(y = MEM_choice, color = "blue"), alpha = 0.7) +
labs(title = "Agent Choices Over Time",
x = "Trial",
y = "Choice (0 or 1)",
color = "Agent") +
theme_minimal()
ggsave("Agent_Choice_Over_Time.png", plot1, width = 8, height = 6, dpi = 300)
setwd("C:/Users/szh/Desktop/ACM/ACM2024/Assignment_2")
library(cmdstanr)
cmdstan_version()
2.36.0
stan_version()
library(rstan)
stan_version()
# Load packages
pacman::p_load(tidyverse, ggplot2, tidybayes, posterior, bayesplot)
# Summarizing the model
samples <- readRDS("simmodels/AWSLS.rds")
samples$summary()
# Assess model quality
draws_df <- as_draws_df(samples$draws())
# Import the simulated data
d <- read.csv("data/simulated_WSLSvsMEM7.csv")
df <- d %>% subset(agent == 100)
# Turn it into a list with n
data <- list(N = 120, selfchoice = df$WSLS, trial = df$trial, oppchoice = df$MEM)
# Getting the prior and posterior predictions from the draws
pred_prior <- rowSums(draws_df[,8:128]) # Getting the prior predictions from the draws
pred_posterior <- rowSums(draws_df[,128:248]) # Getting the posterior predictions from the draws
preds <- data.frame(pred_prior, pred_posterior) # Combining the predictions into a dataframe
# Checking the model's chains
gridExtra::grid.arrange(
ggplot(draws_df, aes(.iteration, theta_w, group = .chain, color = .chain)) +
geom_line() +
labs(title = "Model chains", subtitle = "Theta w") + theme_classic(),
ggplot(draws_df, aes(.iteration, theta_l, group = .chain, color = .chain)) + geom_line() + labs(subtitle = "Theta l") + theme_classic(),
nrow = 2
)
# Prior predictive check
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
labs(title = "Prior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Posterior Predictive Checks
ggplot(preds) +
geom_histogram(aes(pred_prior), color = "red", fill = "red", alpha = 0.3, bins = 90) +
geom_histogram(aes(pred_posterior), color = "blue", fill = "blue", alpha = 0.3, bins = 90) +
geom_point(x = sum(data$selfchoice), y = 0, color = "black", shape = 17, size = 5) +
labs(title = "Posterior Predictive Checks") +
xlab("Predicted heads out of 120 trials") +
ylab("Posterior Density") +
theme_classic()
# Prior-posterior update checks
gridExtra::grid.arrange(
ggplot(draws_df) +
geom_histogram(aes(theta_w_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_w_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.8), linetype = "dashed", color = "black", size = 1.5) +
labs(title = "Prior-posterior update checks") +
theme_classic(),
ggplot(draws_df) +
geom_histogram(aes(theta_l_prior), fill = "red", alpha = 0.3) +
geom_histogram(aes(theta_l_posterior), fill = "blue", alpha = 0.3) +
geom_vline(xintercept = (0.9), linetype = "dashed", color = "black", size = 1.5) +
labs(title = " ") +
theme_classic(),
nrow = 1
)
